/*
 * Title                 :   ${module}   
 * Author                :   ${author}
 * Origin Date           :   ${date}
 * Notes                 :   None
 *
 * Copyright ${year} ${author}
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

/** @file ${module}
 *  @brief This module TODO: WHAT DO I DO?
 * 
 *  This is the header file for the definition TODO: MORE ABOUT ME!
 */
#ifndef ${fileMacro}_H
#define ${fileMacro}_H

/******************************************************************************
 * Includes
  ****************************************************************************/
#include <stdint.h>
#include <stdbool.h>

/******************************************************************************
* Module Preprocessor Constants
*******************************************************************************/
/**
 * Doxygen tag for documenting variables and constants
 */
#define   CONSTANT					5

/******************************************************************************
 * Module Preprocessor Macros
 *****************************************************************************/

/******************************************************************************
 * Module Typedefs
 *****************************************************************************/
/**
 * This enumeration is a list of test types
 */
typedef enum
{
	TEST_TEST1,			/**< Test Type 1 */
	TEST_TEST2,			/**< Test Type 2 */
}Test_t;

/******************************************************************************
 * Module Variable Definitions
 ******************************************************************************/

/******************************************************************************
 * Function Prototypes
 ******************************************************************************/
#ifdef __cplusplus
extern "C"{
#endif

void ${module}_Init(void);

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* ${fileMacro}_H */

/*** End of File *************************************************************/
