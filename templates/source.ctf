/*
 * Title                 :   ${module}   
 * Author                :   ${author}
 * Origin Date           :   ${date}
 * Notes                 :   None
 *
 * Copyright ${year} ${author}
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

/** @file ${module}
 *  @brief This is the source file for TODO: WHAT DO I DO? 
 */
/******************************************************************************
 * Includes
 *****************************************************************************/
#include <stdint.h>				/* For portable types */
#include "${moduleInclude}.h"   /* For this modules declarations */		

/******************************************************************************
 * Module Preprocessor Constants
 *****************************************************************************/
/**
 * Doxygen tag for documenting variables and constants
 */
#define   CONSTANT					5

/******************************************************************************
 * Module Preprocessor Macros
 *****************************************************************************/

/******************************************************************************
 * Module Typedefs
 *****************************************************************************/

/******************************************************************************
 * Module Variable Definitions
 *****************************************************************************/

/******************************************************************************
 * Function Prototypes
 *****************************************************************************/

/******************************************************************************
 * Function Definitions
 *****************************************************************************/
// TODO: UPDATE AND COPY THESE FOR EACH NON_TRIVIAL FUNCTION
/******************************************************************************
 * Function : ${module}_Init()
 * \b Description:
 *
 * This function is used to initialize the ${module} based on the configuration 
 * table defined in dio_cfg module.  
 *
 * PRE-CONDITION: Configuration table needs to populated (sizeof > 0)
 *
 * POST-CONDITION: A constant pointer to the first member of the configuration
 * table will be returned.
 *
 * @return 		A pointer to the configuration table.
 *
 * \b Example Example:
 * @code
 * 	const Dio_ConfigType *DioConfig = Dio_GetConfig();
 *
 * 	Dio_Init(DioConfig);
 * @endcode
 *
 * @see ${module}_Init
 *
 *****************************************************************************/
void ${module}_Init(void) {

}

/*************** END OF FUNCTIONS ********************************************/
